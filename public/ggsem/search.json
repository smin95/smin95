[{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-points","dir":"Articles","previous_headings":"","what":"Adding Points","title":"4. Annotating Any ggplot Objects","text":"load CSV output points using read_csv() function, paste base plot (p) using draw_points().","code":"points_data <- read_csv(\"https://www.smin95.com/points.csv\") p1 <- draw_points(p, points_data)  p1"},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-lines","dir":"Articles","previous_headings":"","what":"Adding Lines","title":"4. Annotating Any ggplot Objects","text":"load CSV output lines using read_csv() function, paste base plot (p1) using draw_lines(). CSV output contains information gradient lines, resolution color gradient can adjusted argument n draw_lines(). default set n = 500 fine resolution can quite slow.","code":"lines_data <- read_csv(\"https://www.smin95.com/lines.csv\") p2 <- draw_lines(p1, lines_data, n = 100) p2"},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-text-annotations","dir":"Articles","previous_headings":"","what":"Adding Text Annotations","title":"4. Annotating Any ggplot Objects","text":"load CSV output annotations using read_csv() function, paste base plot (p2) using draw_annotations().","code":"annotations_data <- read_csv(\"https://www.smin95.com/annotations.csv\") p3 <- draw_annotations(p2, annotations_data) p3"},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-self-loop-arrows","dir":"Articles","previous_headings":"","what":"Adding Self-loop Arrows","title":"4. Annotating Any ggplot Objects","text":"load CSV output self-loop arrows using read_csv() function, paste base plot (p3) using draw_loops().","code":"loops_data <- read_csv(\"https://www.smin95.com/loops.csv\") p4 <- draw_loops(p3, loops_data) p4"},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"math-expressions","dir":"Articles","previous_headings":"","what":"Math Expressions","title":"4. Annotating Any ggplot Objects","text":"ggsem app also provides support adding math expressions. write math expressions, Text Annotation Inputs menu, make sure check box Use Math Expression (orange box), Text follow syntax math expressions function parse(). ggsem app, can just write strings without function parse().  examples: can also added directly ggplot object. example, annotations_data data frame CSV structure ggsem app, contains math expressions:","code":"x^2 # superscript x[2] # subscript alpha # greek letter beta # greek letter x^2 + y[2] == sqrt(alpha * beta) # a formula using above all four library(ggplot2) annotations_data <- data.frame(   text = 'x^2 + y[2] == sqrt(alpha * beta)', x = 26, y = 300, font = 'serif',   size = 20, color = '#000000', angle = 0, alpha = 1,   fontface = 'bold', math_expression = TRUE )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_annotations(p, annotations_data)"},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"launching-the-app","dir":"Articles","previous_headings":"","what":"Launching the app","title":"1. Drawing Elements","text":"begin , let’s run app locally using code (online: https://smin95.shinyapps.io/ggsem/):","code":"install.packages(\"devtools\") devtools::install_github(\"smin95/ggsem\")  ggsem::ggsem()"},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"the-apps-layout","dir":"Articles","previous_headings":"Launching the app","what":"The app’s layout","title":"1. Drawing Elements","text":"picture shows ggsem app. First, ’s space plots rendered (red box). left side, menu. begins dropdown menu Element Selection, allowing users choose type graphical elements add plotting space (inside purple box). five options Element Selection: Point, Line, Text Annotation, Self-loop Arrow, Lavaan Input. Element Selection, users can select order layer graphical elements displayed (inside blue box). default set points front. words, line point overlap, point mask line. Next, slider Zoom Level (within green box). default set factor 1.2x can increased zoom (way factor 10). slider can adjusted using mouse keyboard (left & right arrow buttons). , sliders Horizontal Position Vertical Position (green box). changes focus plotting space displayed. instance, point cutoff right side plotting space space enough, simply adjust slider Horizontal Position. Furthermore, Undo Redo buttons (yellow box). correspond CTRL + Z CTRL + Y. respectively. illustrate, accidently deleted line, simply click Undo button cancel previous action. app remembers steps inputs, Undo button can work way back beginning. Finally, menu (within orange box) specific input depending selected menu Chose Element Type. Without ado, let’s add graphical elements see options interact together.","code":""},{"path":[]},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-points","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Points","title":"1. Drawing Elements","text":"Lets begin adding point. default coordinate X Y position corresponds origin (0, 0). point created, users can hover mouse point point realize center point X = 0 Y = 0, shown bottom-left plotting space. Users can provide several inputs specify aesthetics point. includes X Y coordinates, also filling color (Point Color), shape (Select Shape), size (Point Size), width border (Border Width), color border (Border Color), alpha level (Point Alpha). , can draw square point setting inputs shown : X Coordinate: 5 Y Coordinate: 5 Point Color: #D0C5ED Select Shape: square Point Size: 15 Border Width: 2 Border Color: #9646D4 Point Alpha: 1 specified, please click Add Point button (pink box) render output. make mistakes, can click Undo button cancel changes. Notice output just created now part output table points (within green box). Users can directly change values within table directly change aesthetics selected element, delete selected row (rows). Simply click row interest, click Delete Selected Point (green box).","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-lines","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Lines","title":"1. Drawing Elements","text":"Next, add line selecting Line dropdown menu Choose Element Type. numerous parameters aesthetics users can specify. can start drawing black line coordinates (leave default inputs unchanged): Start X Coordinate: 2 Start Y Coordinate: -2 End X Coordinate: 8 End Y Coordinate: -2  Add Line button clicked, line drawn purple square. line single color, specified dropdown menu Line Color Type. corresponding output table shown orange box figure. Next, draw curved line, whose curvature automatically adjusted based X Y coordinates line segment can manually adjusted controlling Control Point X Control Point Y. Additionally, can set gradient two colors setting Gradient. choose Gradient, conditional color menu appear (End Color), well Gradient Intersection, slider allows us give fine control gradient occurs line segment’s length. Start X Coordinate: 2 Start Y Coordinate: 12 End X Coordinate: 8 End Y Coordinate: 12 Start Color: #F57373 Line Color Type: Gradient End Color: #53F26D Gradient Intersection: 0.5 Line Width: 2 Line Alpha: 1 Line Type: Curved Line gradient intersection either close 0 1, display one color . instance, set 0.01, End Color dominate line segment.  Next, add arrow setting dropdown menu Line Type Straight Arrow, parameters : Start X Coordinate: 18 Start Y Coordinate: 5 End X Coordinate: 12 End Y Coordinate: 5 Start Color: #9E9E9E Line Color Type: Gradient End Color: #54F5AF Gradient Intersection: 0.2 Line Width: 2 Line Alpha: 1 Line Type: Straight Arrow  Leave inputs intact, Arrow Type (open closed arrowheads) Arrow Size (size arrow head).","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-text-annotations","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Text Annotations","title":"1. Drawing Elements","text":"Now, add text annotation beside end arrow, labelled “Square One” using inputs : Text: Square One X Coordinate: 26 Y Coordinate: 5 Font: sans Text Size: 20 Color: #000000 Angle (deg): 0 Text Alpha: 1 Typeface: Bold Add Text button pressed, text “Square One”” rendered. However, see text cutoff right side enough plotting space. X Y coordinates text refer position text’s center.","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-self-loop-arrows","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Self-loop Arrows","title":"1. Drawing Elements","text":"Finally, can add circular self-loop arrow plotting output using inputs : X Coordinate (Center): -5 Y Coordinate (Center): 5 Radius: 2 Line Width: 1 Line Color: #000000 Line Alpha: 1 Arrow Type: closed Arrow Size: 0.1 Loop Width: 1 Loop Height: 1 can also use slider X-Level re-adjust focus plotting space (using mouse left/right arrows keyboard) elements center space: X-Level: 8 generate self-loop arrow left side Add Self-loop Arrow button clicked. Note also Apply Changes Lock Self-loop Arrows buttons (green box). Apply Changes button: Changes currently existing self-loop arrows’ Gap Size (two ends arrow) Loop Orientation (deg). Lock Self-Loop Arrows button: Makes currently existing self-loop arrows immune subsequent usages Apply Changes button. press satisfied current orientation gap size existing self-loop arrow.","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"saving-data-and-graphics","dir":"Articles","previous_headings":"Adding Elements","what":"Saving Data and Graphics","title":"1. Drawing Elements","text":"Notice whenever add graphical element onto plotting space, output table gets updated. four tables total: 1) Points Table, 2) Lines Table, 3) Annotations Table, 4) Self-loop Arrows Table. Users can directly manipulate aesthetics elements modifying numiercal inputs table, x Y coordinates alpha level. can also save CSV files, close ggsem app, load continue working figures later future. download four tables, go dropdown menu Choose CSV Download, click button Download Selected CSV, four tables. reload CSV files back app, users can click Browse Upload CSV Files locate CSV files interest. output image can also exported either PNG, JPEG, PDF SVG specific X Y ranges. want save figure asymmetric dimensions, make sure uncheck Fixed Aspect Ratio. picture directly exported PNG output web application.","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"1. Drawing Elements","text":"plot generated can recreated ggplot object RStudio using function csv_to_ggplot(), might take time run CSV line include gradient settings. reduce time, can choose reduce value n (default value = 100) lower value, argument used set resolution gradient coloring curvature line. can save figure PNG file verify whether identical one drawn ggsem web app. , set width = 9 height = 9 dimension exported image file.  can also add plot light-grey (grey90) background graphical output using typical ggplot2 functions change range y-axis.  lot empty space , can chip away directly dealing axis limits figure using adjust_axis_space(). handles removal empty space asymmetrically. important arguments: 1) x_adjust_left_percent: Percentage expand shrink left boundary x-axis, 2) x_adjust_right_percent: Percentage expand shrink right boundary x-axis, 3) y_adjust_top_percent: Percentage expand shrink bottom boundary y-axis, 4) y_adjust_bottom_percent: Percentage expand shrink top boundary y-axis. remove 30% left side x axis range, 20% right x-axis range, 32% top side y-axis range, 43% bottom side y-axis range (shown ). , save figure using save_figure() (function ggsem), automatically chooses optimal width height image based x y ranges. Tip: satisfied automatic adjustment plot’s dimension save_figure(), use ggsave() either adjust width height ().","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/points.csv\") lines_data <- read_csv(\"https://www.smin95.com/lines.csv\") annotations_data <- read_csv(\"https://www.smin95.com/annotations.csv\") loops_data <- read_csv(\"https://www.smin95.com/loops.csv\")  p1 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = annotations_data,   loops_data = loops_data,   zoom_level = 1.2, # From the ggsem app   horizontal_position = 8, # From the ggsem app   vertical_position = 0,   n = 100 ) # Default vertical position on the app ggsave(\"p1.png\", p1, width = 9, height = 9) p2 <- p1 + theme(   plot.background = element_rect(fill = \"grey90\", color = NA) # Grey background, no border ) p2b <- adjust_axis_space(p2, x_adjust_left_percent = -30,                           x_adjust_right_percent = -20,                           y_adjust_top_percent = -30,                           y_adjust_bottom_percent = -43) save_figure(\"p2b.png\", p2b)"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"the-lavaan-packages-syntax","dir":"Articles","previous_headings":"","what":"The lavaan Package’s Syntax","title":"3. Drawing Structural Equation Modeling Diagrams Without Data","text":"psychology, lavaan package widely used structural equation modeling (SEM) R. integrates methods factor analysis, regression models path analysis coherent framework, allowing researchers study different variables related one another. Basically, models can specified using strings particular syntax lavaan package ggsem application.  example, three latent variables (reading, math music) nine observed variables (x1 x9). latent variable can inferred set data variables directly observed. Usually, captures index easily measured quantified. string =~ syntax lavaan, often used define relationship latent observed variables. can translated “measured ” “indicated ”. instance, music   =~ x7 + x8 + x9 means latent variable music can measured three variables x7, x8, x9, sense rhythm, reading ability music scores, aptitude learning play musical instrument. words, =~operator lavaan denotes one-way direction. convention, semPlot package, one-way arrow drawn latent variable observed variable Therefore, translate strings , reading can measured x1, x2 x3 variables (ex. language), math can measured x4, x5 x6 variables, music can measured x7, x8 x9 variables. Additionally, ~ operator indicates causal relationship independent variable dependent variable. also one-way relationship. instance, one’s stamina high, one’s running distance much longer. ~ (regression) =~ shown one-way arrow SEM diagrams, recognized ggsem app similar fashion semPlot. ‘~~’ refers covariance, ggsem plots two-way arrow (curved rather straight) just like semPlot (curved).","code":"# Latent variable definitions # Copy and paste it into ggsem app without quotations  reading =~ x1 + x2 + x3 math =~ x4 + x5 + x6 music =~ x7 + x8 + x9  music ~~ math running distance ~ stamina"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"drawing-a-sem-diagram-with-a-lavaan-model","dir":"Articles","previous_headings":"","what":"Drawing a SEM diagram with a lavaan model","title":"3. Drawing Structural Equation Modeling Diagrams Without Data","text":"Let’s run app locally using code (online: https://smin95.shinyapps.io/ggsem/):  can start visualizing SEM diagram using strings: string already written text area Lavaan Syntax SEM Data menu. readers want supply models, delete sample string. important inputs drawing SEM diagram lavaan model. Center X: Horizontal center position SEM diagram. Center Y: Vertical center position SEM diagram. Width X: Radius SEM’s diagram width. set 15, entire width 30. Height Y: Radius SEM’s diagram height. set 15, entire height 30. Line Endpoint Spacing: Spacing node edge’s endpoint. Arrowhead Location: Location arrowhead (latent observed variable observed latent variable). Latent Variable Color: Color nodes represent latent variables. Observed Variable Color: Color nodes represent observed variables. Latent Variable Size: size nodes represent latent variables. Observed Variable Size: size nodes represent observed variables. Choose Layout Algorithms: Layout nodes edges. layouts semPlot package. include Tree, Circle, Spring, Tree2, Circle2 Default. adjust inputs (leave rest unchanged): Width X: 20 Height Y: 20 Line Endpoint Spacing: 4 Latent Variable Color: #FAAACB Observed Variable Color: #F7D7EF Latent Variable Size: 25 Observed Variable Size: 18 Choose Layout Algorithms: Spring specifying aesthetics, click Draw SEM button (blue box), creates new graphical outputs. Apply Changes button (pink box) modifies aesthetics existing graphical outputs created SEM Data menu. Apply Changes button modifies aesthetics graphical elements created SEM Data menu menus. Components generated lavaan TRUE lavaan column output tables. Lock SEM Changes button (brown box) causes lavaan components FALSE lavaan column, making immune Apply Changes. Click satisfied aesthetics.","code":"ggsem::ggsem() # latent variable definitions reading =~ x1 + x2 + x3 math =~ x4 + x5 + x6 music =~ x7 + x8 + x9  music ~~ math"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"modifying-the-sem-diagram-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the SEM Diagram from ggsem app in ggplot2 Workflow","title":"3. Drawing Structural Equation Modeling Diagrams Without Data","text":"Next, can remove empty space shrinking range axes using adjust_axis_space() 17% top 20% places (leave space title top). Now, can add title using function annotate(), disrupt scaling figure (ggtitle() can unpredictable). , first see limits x y axis ranges decide annotate.","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/sem_points.csv\") lines_data <- read_csv(\"https://www.smin95.com/sem_lines.csv\") texts_data <- read_csv(\"https://www.smin95.com/sem_annotations.csv\")  sem_plot <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = texts_data,   element_order = c(\"lines\", \"points\", \"annotations\") ) # order priority: lines < points < texts sem_plot2 <- adjust_axis_space(sem_plot, x_adjust_left_percent = -20,                                 x_adjust_right_percent = -20,                                y_adjust_bottom_percent = -20,                                 y_adjust_top_percent = -17) get_axis_range(sem_plot2) #> $x_range #> [1] -31.68  31.68 #>  #> $y_range #> [1] -31.824  34.704 sem_plot2b <- sem_plot2 +   annotate(\"text\",     label = \"Intelligence Measure (SEM)\", x = 0, y = 30, size = 7,     fontface = \"bold\"   ) save_figure(\"sem_plot2b.png\", sem_plot2b)"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"hacking-the-csv-outputs-from-ggsem-app","dir":"Articles","previous_headings":"","what":"Hacking the CSV Outputs from ggsem app","title":"3. Drawing Structural Equation Modeling Diagrams Without Data","text":"can also modify CSV outputs converting ggplot object. Notice font texts SEM diagram faint, can bold directly replacing values fontface column texts_data , can recreate figure using csv_to_ggplot(), save output using save_figure().  summary, outputs ggsem app can directly modified using ggplot2 workflow, making every graphical element computationally reproducible. personally prefer get general diagram way using app, modify details using ggplot2 directly, demonstrated . might differ among different users.","code":"texts_data$fontface <- \"bold\" sem_plot3 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = texts_data,   element_order = c(\"lines\", \"points\", \"annotations\") )   sem_plot3b <- adjust_axis_space(sem_plot3, x_adjust_left_percent = -20,                                 x_adjust_right_percent = -20,                                y_adjust_bottom_percent = -20,                                 y_adjust_top_percent = -17) sem_plot3c <- sem_plot3b +   annotate(\"text\",     label = \"Intelligence Measure (SEM)\", x = 0, y = 30, size = 7,     fontface = \"bold\"   ) save_figure(\"sem_plot3c.png\", sem_plot3c)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"network-layouts-of-points-nodes","dir":"Articles","previous_headings":"","what":"Network Layouts of Points (Nodes)","title":"2. Drawing Networks Without Data","text":"ggsem app provides numerous layouts, derived igraph package. instance, users draw 10 points clicking Add Point button 10 times, choose certain layout, points can sorted network configuration using inputs Draw Networks menu. Let’s start creating 10 points clicking Add Point button 10 times (Point Size = 10). Since located origin (X = 0, Y = 0), overlapped plotting area. able see one black point. confirm whether 10 points, check Points Table see 10 rows total (blue rectangle figure).  Draw Networks part menu, important inputs. : Layout Type: eight provided layouts: 1) Circle, 2) Grid, 3) Random, 4) Star, 5) Fruchterman-Reingold, 6) Kamada-Kawai, 7) Straight Line. Point Distance: Relative distance two neighboring points/nodes. Center X Position: X coordinate network’s center. Center Y Position: Y coordinate network’s center. Gradient Start Color: first color gradient. Gradient End Color: second color gradient. three additional buttons. : Auto-layout Points: click button (least two unlocked points), points arranged specific configuration based Layout Type input. Apply Gradient: click button (least two unlocked points), filling color points gradient palette. Lock Points: button pressed, existing points Points Table become locked, becoming immune effect subsequent effects Auto-layout Points Apply Gradient. words, batch points arranged appropriately, click button keep characteristics (position color). Now know inputs , let’s start setting layout 10 points : Layout Type: Circle click Auto-layout Points button, points sorted circle, whose center origin (X = 0, Y = 0) specified. Since, empty space middle, can add one point center (X = 0, Y = 0) clicking Add Point button. Next, can set gradient filling color points setting inputs : Gradient Start Color: #C0E1FC Gradient End Color: #44599E since 11 points currently unlocked (see locked column Points Table), gradient colors can applied clicking Apply Gradient. Now, small blue-colored network eleven points.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"connecting-the-points-in-a-network","dir":"Articles","previous_headings":"","what":"Connecting the Points in a Network","title":"2. Drawing Networks Without Data","text":"connect points navy network, can add lines, set (top dropdown menu): Choose Element Type: Line many ways points can connected lines (edges) using ggsem app. Let’s shift attention dropdown menu Choose Edge Connection Type Draw Networks. several options: Fully Connected: Connects edges pair nodes Nearest Neighbor: Links node closest neighbor. Connect Central Node: Links peripheral nodes central node (geometric center based coordinates). Connect Particular Node: Links nodes particular node choice. choosing menu, users supply ID number (Points Table’s first column) point Select Central Node. Random Graph: Links nodes random fashion based Erdos-Renyi model. different time. , choose Connect Central Node. practice, readers can also choose option Connect Particular Node, find ID number central point Points Table, connect peripheral nodes central one.  turns ID central node 11 coordinate X = 0 Y = 0. can choose aesthetics lines automatically generated : Edge Color: #CACFDB Edge Width: 2 Edge Alpha: 0.5 Edge Spacing controls space nodes endpoints edges.  Next, create another network using layout functions. , need lock points, later usages **Draw Networks* functions affect positions edge connections. , go back Point menu, click Lock Points button (orange rectangle) Draw Networks.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"drawing-a-second-network","dir":"Articles","previous_headings":"","what":"Drawing a Second Network","title":"2. Drawing Networks Without Data","text":"second network, let’s add 11 points clicking Add Point button 11 times. Make sure check Points Table see additional 11 rows (22 rows total). , adjust focus plotting window setting: X-Level: 16  Set layout points : Layout Type: Fruchterman-Reingold Point Distance: 10 Orientation (Degrees): 0 Center X Position: 30 Center Y Position: 0 Gradient Start Color: #FFC2E7 Gradient End Color: #9E4468 , click Auto-layout Points Apply Gradient buttons.  Now, go back Line menu, automatically generate lines. can choose option Fully Connected aesthetics: Edge Color: #DBCAD3 Edge Width: 1 Edge Alpha: 0.3 , lock points Point menu clicking Lock Points, stabilize second network plotting space. can save CSV files points lines, load RStudio using typical ggplot2 workflow.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"2. Drawing Networks Without Data","text":"first chapter, can modify plot output ggsem app usihg ggplot2 functions directly. use csv_to_ggplot() convert CSV outputs shiny app ggplot object. , set order elements points front lines using argument element_order. lines written first, followed points, points recently applied, hence takes order priority. use zoom_level, horizontal_position vertical_position ggsem app. Notice CSV files text annotations self-loop arrows. , provide , csv_to_ggplot() still runs smoothly. , unnecessary load empty CSV class graphical element previously added app. current output lot empty space, needs trimmed. remove 10% left right hand side, 28% top bottom p3. save output p3b.   Next, add text annotations graphical output using typical ggplot2 functions, annotate(). , extract plot’s ranges x-axis y-axis using get_axis_range(). Now know ranges, can decide exactly add text annotations. add texts top network. can save figure using save_figure(). empty space removed, figure scale automatically.","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/points2.csv\") lines_data <- read_csv(\"https://www.smin95.com/lines2.csv\")  p3 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   zoom_level = 1.2, # From the ggsem app   horizontal_position = 16, # From the ggsem app   vertical_position = 0,   element_order = c(\"lines\", \"points\") ) # order priority: lines < points p3b <- adjust_axis_space(p3, x_adjust_left_percent = -20,                           x_adjust_right_percent = -20,                           y_adjust_top_percent = -35,                           y_adjust_bottom_percent = -35) get_axis_range(p3b) #> $x_range #> [1] -15.68  47.68 #>  #> $y_range #> [1] -15.84  15.84 p4 <- p3b + annotate(\"text\",   label = \"First Network\", x = 0.5, y = 14.5,   fontface = \"bold\", size = 7 ) +   annotate(\"text\",     label = \"Second Network\", x = 29.5, y = 14.5,     fontface = \"bold\", size = 7   ) save_figure(\"p4.png\", p4)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"hacking-the-csv-outputs-from-ggsem-app","dir":"Articles","previous_headings":"","what":"Hacking the CSV Outputs from ggsem app","title":"2. Drawing Networks Without Data","text":"can also hack CSV output values. , separately plot network combine using patchwork package. split points_data lines_data data frames. know first network eleven points ten lines, include points_data1 lines_data2, include rest points_data2 lines_data2. Next, separately convert CSV outputs two networks, shift horizontal_position, placing network plotting space’s center. reduce surrounding empty space net1 net2 25% using adjust_axis_space() function. save outputs net1a net2a. , can add title using ggtitle() plots. Next, using + operator patchwork, combine net1 net2 one ggplot2 object. can now save net_tgd image file using save_figure() function. , scale_factor() adjusted slightly reproduce figures faithfully. default value scale_factor() save_figure() 0.11.","code":"library(patchwork) # install.packages('patchwork')  points_data1 <- points_data[1:11, ] # First network's point points_data2 <- points_data[12:nrow(points_data), ]  lines_data1 <- lines_data[1:10, ] # First network's lines lines_data2 <- lines_data[11:nrow(lines_data), ] net1 <- csv_to_ggplot(   points_data = points_data1,   lines_data = lines_data1,   zoom_level = 1.2,    horizontal_position = 0, # 0 because blue network's center is at X = 0, Y = 0   vertical_position = 0,   element_order = c(\"lines\", \"points\") )   net2 <- csv_to_ggplot(   points_data = points_data2,   lines_data = lines_data2,   zoom_level = 1.2,   horizontal_position = 30, # 30 because red network's center is at X = 30, Y = 0   vertical_position = 0,   element_order = c(\"lines\", \"points\") ) net1a <- adjust_axis_space(net1, x_adjust_left_percent = -37,                           x_adjust_right_percent = -37,                           y_adjust_top_percent = -37,                           y_adjust_bottom_percent = -37)  net2a <- adjust_axis_space(net2, x_adjust_left_percent = -37,                           x_adjust_right_percent = -37,                           y_adjust_top_percent = -37,                           y_adjust_bottom_percent = -37) net1b <- net1a + ggtitle(\"First Network\") +   theme(plot.title = element_text(hjust = 0.5)) + # Title is aligned to the center   theme(plot.title = element_text(size = 11, face = \"bold\")) # Font size of the title   net2b <- net2a + ggtitle(\"Second Network\") +   theme(plot.title = element_text(hjust = 0.5)) +   theme(plot.title = element_text(size = 11, face = \"bold\")) net_tgd <- net1b + net2b # One row, two columns save_figure(\"net_tgd.png\", net_tgd, scale_factor = 0.2)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"labelling-the-nodes-with-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Labelling the Nodes with ggplot2 workflow","title":"2. Drawing Networks Without Data","text":"now discuss can label nodes using ggplot2 workflow. , label net1. First, remove empty space 25% around blue network. start creating data frame text labels X Y coordinates. data frame texts_data contains three columns: 1) x: contains x coordinates point_data1, 2) y: contains y coordinates point_data1, 3) label: contains character strings. Next, use geom_text() label text annotations row (observation) texts_data. map coordinates labels within aes() columns data frame.  can improve visibility text node applying unique color adjusting text size. use custom colors geom_text(), scale_color_identity() also used ensure colors properly rendered.","code":"net1a <- adjust_axis_space(net1, x_adjust_left_percent = -37,                           x_adjust_right_percent = -37,                           y_adjust_top_percent = -37,                           y_adjust_bottom_percent = -37) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. texts_data <- data.frame(   x = points_data1$x,   y = points_data1$y,   label = paste0(\"S\", 1:nrow(points_data1)) )  head(texts_data) #>           x            y label #> 1  10.00000 0.000000e+00    S1 #> 2   8.09017 5.877853e+00    S2 #> 3   3.09017 9.510565e+00    S3 #> 4  -3.09017 9.510565e+00    S4 #> 5  -8.09017 5.877853e+00    S5 #> 6 -10.00000 1.224606e-15    S6 net1a +   geom_text(aes(x = x, y = y, label = label), data = texts_data, fontface = \"bold\") cList <- c(   \"#494949\", \"#494949\", \"#5B5B5B\", \"#5B5B5B\", \"#EBEBEB\",   \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\",   \"#FDFDFD\" ) # text color for each node label  texts_data$color <- cList  net1a +   geom_text(aes(x = x, y = y, label = label, color = color),     data = texts_data,     fontface = \"bold\", size = 5   ) +   scale_color_identity()"},{"path":"https://smin95.github.io/ggsem/articles/network_data.html","id":"data-formats","dir":"Articles","previous_headings":"","what":"Data Formats","title":"5. Visualizing Network Using Data","text":"ggsem web application accepts two types CSV files plotting network diagrams: edge list adjacency matrix. examples shown . edge_list_w data frame stores edge list three columns (source, target, weight). Users upload CSV files column names data files properly recognized ggsem web application. source contains nodes edges originate , target contains nodes edges arrive. weight denotes strength connection. weight column can missing, data file can still recognized ggsem. Another format data frame ggsem recognizes adjacency matrix, shown . adjacency matrix effective way record relationships nodes network analysis. Rows columns denote nodes. matrix symmetric (adj_matrix_symm), shows undirected relationships (direction). , weight. 0 represents connection, 1 represents connection. adjacency matrix asymmetric, shows directed relationships, adj_matrix. can also contain weight values. network weighted, value larger smaller 1 can used denote strength relationship. , adj_matrix represents directed graph weights.","code":"library(tidyverse) library(ggsem)  edge_list_w <- read.csv('https://www.smin95.com/edges_example.csv') # with edge weight edge_list_nw <- read.csv('https://www.smin95.com/edges_example_nw.csv') # without weight  edge_list_w # column names #>   source target weight #> 1      A      B    1.0 #> 2      A      C    2.0 #> 3      B      C    3.0 #> 4      C      D    1.5 #> 5      D      E    2.0 #> 6      E      A    2.5 edge_list_nw #>   source target #> 1      A      B #> 2      A      C #> 3      B      C #> 4      C      D #> 5      D      E #> 6      E      A adj_matrix_symm <- read.csv('https://www.smin95.com/edges_example_adj_symm.csv') adj_matrix_symm #>   X A B C D #> 1 A 0 1 0 1 #> 2 B 1 0 1 0 #> 3 C 0 1 0 1 #> 4 D 1 0 1 0 adj_matrix <- as.matrix(read.csv('https://www.smin95.com/edges_example_adj.csv',                                  row.names = 1, check.names = FALSE)) adj_matrix #>   A B C D E #> A 0 0 0 0 1 #> B 1 0 0 0 0 #> C 1 2 0 0 0 #> D 0 0 2 0 0 #> E 0 1 0 2 0"},{"path":"https://smin95.github.io/ggsem/articles/network_data.html","id":"ggsem-application","dir":"Articles","previous_headings":"","what":"ggsem Application","title":"5. Visualizing Network Using Data","text":"Let’s launch application visualize data. First, readers download data https://www.smin95.com/edges_example.csv. Just clicking link trick. Another way load data R save file directory.  loading data, users can select Network Layout Settings set random seed 3 reproduce network diagram created example.  default color nodes blue node label white. However, can changed using input menu Node Settings Edge Settings. also options use types layouts, Dimensionality Reduction employs machine-learning algorithm. app can also color nodes differently performing clustering analysis using 10 different color palettes packages RColorBrewer smplot2. setting random seed uploading data onto ggsem app, click Draw Network button shown figure .  Since data frame weight column, network diagram edge labels. graphical outputs can accessed table plotting space Annotations. rows representing edge labels white color rather red unlocked.  unlocked status (locked column) allows users group aesthetically modify X Y positions . , go Text Annotation menu. , example, instead delete elements, represent weights visually.  go back Network Data menu’s Edge Settings, option scale width edges points. set minimum edge width 1 maximum edge width 2.5. apply aesthetic changes existing network diagram, click Apply Changes button. Remember Apply Changes button changes aesthetics elements whose network column set TRUE. , elements drawn separately (individual points SEM diagrams) affected.  Finally, add text annotation Network Data X = 0, Y = 17 text size = 22 fontface = bold clicking Add Annotation button Text Annotations menu. saving png file, users can select x range y range figure remove surrounding white space. can choose asymmetric dimensions unchecking Fixed Aspect Ratio box saving figures images. However, example, remove script-based workflow exporting outputs CSV files.  final output, saved png image ggsem application (demonstration purposes), without removing white space plotting space.","code":"ggsem() df <- read_csv('https://www.smin95.com/edges_example.csv') write_csv(df,'edges_example.csv')"},{"path":"https://smin95.github.io/ggsem/articles/network_data.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"5. Visualizing Network Using Data","text":"upload CSV files store separate objects R. , use objects input visualize outputs using csv_to_ggplot(). ensure zoom_level. horizontal_position vertical_position match settings used ggsem app. , white space can removed using adjust_axis_space() function, allows users asymmetrically remove white space. remove 30% top space, 35% areas surrounding plot already included plot’s title. can save output network_plot_b image file using save_figure(). additional argument needed function handles figure dimensions automatically.","code":"points_data <- read_csv(\"https://www.smin95.com/points5.csv\") lines_data <- read_csv(\"https://www.smin95.com/lines5.csv\") annotations_data <- read_csv(\"https://www.smin95.com/annotations5.csv\")  network_plot <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = annotations_data,   zoom_level = 1.2, # From the ggsem app   horizontal_position = 0, # From the ggsem app   vertical_position = 0 ) network_plot_b <- adjust_axis_space(network_plot, x_adjust_left_percent = -35,                           x_adjust_right_percent = -35,                           y_adjust_top_percent = -30,                           y_adjust_bottom_percent = -35) save_figure('network_plot_b.png', network_plot_b)"},{"path":"https://smin95.github.io/ggsem/articles/others.html","id":"output-tables-can-be-directly-edited","dir":"Articles","previous_headings":"","what":"Output Tables Can Be Directly Edited","title":"7. Other Tips","text":"output tables can edited mouse click. want change X Y coordinates using output tables directly, click specific row, type input. , app re-render final plot modified coordinates element immediately. colors, hex codes allowed rather color names. input incorrect code, automatically default black color. Alpha values gradient position can range 0 1. columns won’t accept character inputs. worry make mistakes. output tables automatically default certain settings instead inappropriate inputs provided.","code":""},{"path":"https://smin95.github.io/ggsem/articles/others.html","id":"aesthetic-grouping-through-lockunlock","dir":"Articles","previous_headings":"","what":"Aesthetic Grouping Through Lock/Unlock","title":"7. Other Tips","text":"Lock/Unlock mechanisms useful modify multiple elements . can applied classes elements: points, lines, annotations self-loop arrows. Unlocked elements can edited via Apply Changes button. can manually select elements lock unlock using output tables.","code":""},{"path":"https://smin95.github.io/ggsem/articles/others.html","id":"aesthetic-grouping-of-sem-diagram","dir":"Articles","previous_headings":"","what":"Aesthetic Grouping of SEM Diagram","title":"7. Other Tips","text":"Elements generated SEM Data automatically grouped together lavaan column (set TRUE). means add another element separately (ex. circle point), layout settings SEM Data affect separately generated element. press Finalize SEM button, inputs SEM Data menu affect aesthetics SEM diagram app longer recognizes SEM diagram (lavaan column set FALSE). mechanism, can generate multiple SEM diagrams sequence. Generate SEM diagram, modify aesthetics, finalize . generate another SEM diagram, modify , etc.","code":""},{"path":"https://smin95.github.io/ggsem/articles/others.html","id":"aesthetic-grouping-of-network-diagram","dir":"Articles","previous_headings":"","what":"Aesthetic Grouping of Network Diagram","title":"7. Other Tips","text":"Elements generated Network Data also automatically grouped network column (set TRUE). press Finalize Network button, inputs Network Data menu affect aesthetics network diagram app longer recognizes network diagram (network column set FALSE). mechanism, can create several network diagrams sequence. Generate network diagram, modify aesthetics, finalize . generate another network diagram, modify , etc.","code":""},{"path":"https://smin95.github.io/ggsem/articles/sem_data.html","id":"data-formats","dir":"Articles","previous_headings":"","what":"Data Formats","title":"6. Visualizing SEM Diagrams Using Data","text":"ggsem web application accepts two types CSV files plotting SEM diagrams: data frame matrix. examples shown . Basically, data files able understood lavaan package. Let’s load data lavaan package. first example data frame PoliticalDemocracy first column id, identifies row. common feature datasets analyzed lavaan. second example data frame HolzingerSwineford1939 also first column id, identifies row. column names refer variable (observed latent). plan use custom data files, please make sure similar structures two examples. can download datasets directory using codes: Another format data frame ggsem recognizes matrix, shown . directly example lavaan’s documentation website (https://lavaan.ugent./tutorial/cov.html). things noticeable matrix. first element (row 1, column 1) empty. first column names variables. column names match names rows. matrix symmetrical structure. structure matrix recognized lavaan package, ggsem uses perform statistical analyses. Make sure upload CSV file matrix structure ggsem.","code":"library(tidyverse) library(ggsem) library(lavaan) # install.packages('lavaan')  head(PoliticalDemocracy) #>      y1       y2       y3       y4       y5       y6       y7       y8       x1 #> 1  2.50 0.000000 3.333333 0.000000 1.250000 0.000000 3.726360 3.333333 4.442651 #> 2  1.25 0.000000 3.333333 0.000000 6.250000 1.100000 6.666666 0.736999 5.384495 #> 3  7.50 8.800000 9.999998 9.199991 8.750000 8.094061 9.999998 8.211809 5.961005 #> 4  8.90 8.800000 9.999998 9.199991 8.907948 8.127979 9.999998 4.615086 6.285998 #> 5 10.00 3.333333 9.999998 6.666666 7.500000 3.333333 9.999998 6.666666 5.863631 #> 6  7.50 3.333333 6.666666 6.666666 6.250000 1.100000 6.666666 0.368500 5.533389 #>         x2       x3 #> 1 3.637586 2.557615 #> 2 5.062595 3.568079 #> 3 6.255750 5.224433 #> 4 7.567863 6.267495 #> 5 6.818924 4.573679 #> 6 5.135798 3.892270 head(HolzingerSwineford1939) #>   id sex ageyr agemo  school grade       x1   x2    x3       x4   x5        x6 #> 1  1   1    13     1 Pasteur     7 3.333333 7.75 0.375 2.333333 5.75 1.2857143 #> 2  2   2    13     7 Pasteur     7 5.333333 5.25 2.125 1.666667 3.00 1.2857143 #> 3  3   2    13     1 Pasteur     7 4.500000 5.25 1.875 1.000000 1.75 0.4285714 #> 4  4   1    13     2 Pasteur     7 5.333333 7.75 3.000 2.666667 4.50 2.4285714 #> 5  5   2    12     2 Pasteur     7 4.833333 4.75 0.875 2.666667 4.00 2.5714286 #> 6  6   2    14     1 Pasteur     7 5.333333 5.00 2.250 1.000000 3.00 0.8571429 #>         x7   x8       x9 #> 1 3.391304 5.75 6.361111 #> 2 3.782609 6.25 7.916667 #> 3 3.260870 3.90 4.416667 #> 4 3.000000 5.30 4.861111 #> 5 3.695652 6.30 5.916667 #> 6 4.347826 6.65 7.500000 df1 <- read.csv('https://www.smin95.com/HolzingerSwineford1939.csv', check.names = FALSE) write_csv(df1, 'HolzingerSwineford1939.csv')  df2 <- read.csv('https://www.smin95.com/PoliticalDemocracy.csv', check.names = FALSE) write_csv(df2, 'PoliticalDemocracy.csv') lower <- '  11.834   6.947   9.364   6.819   5.091  12.532   4.783   5.028   7.495   9.986  -3.839  -3.889  -3.841  -3.625  9.610 -21.899 -18.831 -21.748 -18.775 35.522 450.288 '  wheaton.cov <-    getCov(lower, names = c(\"anomia67\", \"powerless67\",                            \"anomia71\", \"powerless71\",                           \"education\", \"sei\"))  wheaton.cov #>             anomia67 powerless67 anomia71 powerless71 education     sei #> anomia67      11.834       6.947    6.819       4.783    -3.839 -21.899 #> powerless67    6.947       9.364    5.091       5.028    -3.889 -18.831 #> anomia71       6.819       5.091   12.532       7.495    -3.841 -21.748 #> powerless71    4.783       5.028    7.495       9.986    -3.625 -18.775 #> education     -3.839      -3.889   -3.841      -3.625     9.610  35.522 #> sei          -21.899     -18.831  -21.748     -18.775    35.522 450.288 matrix_example <- as.matrix(read.csv('https://www.smin95.com/wheaton_cov.csv',                                      row.names = 1, check.names = FALSE)) matrix_example #>             anomia67 powerless67 anomia71 powerless71 education     sei #> anomia67      11.834       6.947    6.819       4.783    -3.839 -21.899 #> powerless67    6.947       9.364    5.091       5.028    -3.889 -18.831 #> anomia71       6.819       5.091   12.532       7.495    -3.841 -21.748 #> powerless71    4.783       5.028    7.495       9.986    -3.625 -18.775 #> education     -3.839      -3.889   -3.841      -3.625     9.610  35.522 #> sei          -21.899     -18.831  -21.748     -18.775    35.522 450.288"},{"path":"https://smin95.github.io/ggsem/articles/sem_data.html","id":"ggsem-application","dir":"Articles","previous_headings":"","what":"ggsem Application","title":"6. Visualizing SEM Diagrams Using Data","text":"Let’s open application visualize SEM diagram data. First, readers download data https://www.smin95.com/HolzingerSwineford1939.csv load app Data Model Specifics menu SEM Data. check box Data frame data file interpreted correctly.  loading data, users can draw SEM clicking Draw SEM button.  default color latent nodes red, observed nodes blue, node label white. However, can modified using input menu Node Settings Edge Settings. Apply aesthetic changes existing SEM diagram using Apply Changes button.  Unlike Chapter 3, drew SEM diagram without data, drawn SEM diagram data, allowing ggsem perform statistical analyses. Hence, SEM diagram edge labels parameter estimate values computed lavaan package. statistical significance (p < 0.05) labelled asterisks (*). graphical outputs can accessed Annotations table plotting space. rows representing edge labels white color rather red unlocked. Notice default model syntax actually agrees data frame example. , decide use data, make sure change lavaan model. decide use matrix data file, make sure change Custom SEM Code : ggsem app, lavaan_string stores syntax input, data object stores data uploaded. , two things get changed Custom SEM Code, error occur. things remain unchanged, arguments can added specific analyses, sample.cov sample.nobs fit model (lavaan_string) covariance matrix data. unlocked status (locked column) allows users group aesthetically modify X Y positions . , go Text Annotation menu. Make sure Shift XY checked Aesthetics Grouping sub-menu.  example, shift position X Y unit 1. inputing values, click Apply Changes button. important remember Apply Changes button changes aesthetics elements whose lavaan column set TRUE. , elements drawn separately (individual points network diagrams) influenced.  Next, perform another modification using aesthetic grouping. enlarge edge labels slightly. Draw Individual Annotations menu, input Text Size 16. Aesthetic Grouping, check Aesthetics change aesthetics unlocked annotations group. Finally, add text annotation SEM Diagram X = -2, Y = 32 text size = 23 fontface = bold clicking Add Annotation button Text Annotations menu. saving png file, users can select x range y range figure remove surrounding white space. set range X axis -29 29 Y axis -32 36.  final png image removing unnecessary white space ggsem application without coding.  can produced codes using function adjust_axis_range() shown . fact, ggsem app uses function save figure outputs.","code":"ggsem() sem(lavaan_string, sample.cov = data, sample.nobs = ..., ...) # Don't run. Not a real code. plot <- csv_to_ggplot(...) plot_adjusted <- adjust_axis_range(plot,                                    x_range = c(-29, 29),                                    y_range = c(-32, 36),                                   fixed_aspect_ratio = TRUE)   save_figure(\"fig6g.png\", plot_adjusted) # same as the app"},{"path":"https://smin95.github.io/ggsem/articles/sem_manual.html","id":"example-1-confirmatory-factor-analysis-cfa","dir":"Articles","previous_headings":"","what":"Example 1: Confirmatory Factor Analysis (CFA)","title":"4. Manually Visualizing Structural Equation Modeling Diagrams without lavaan","text":"draw path diagram CFA based website (https://www.theanalysisfactor.com/four-types-sem/). diagram, : Two latent variables (ovals) Eight observed variables (rectangles) Eight factors (small ovals)","code":""},{"path":"https://smin95.github.io/ggsem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Seung Hyun Min. Author, maintainer.","code":""},{"path":"https://smin95.github.io/ggsem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Min S (2025). ggsem: Interactively Visualize Structural Equation Modeling Diagrams. R package version 0.2.4, https://smin95.github.io/ggsem/.","code":"@Manual{,   title = {ggsem: Interactively Visualize Structural Equation Modeling Diagrams},   author = {Seung Hyun Min},   year = {2025},   note = {R package version 0.2.4},   url = {https://smin95.github.io/ggsem/}, }"},{"path":"https://smin95.github.io/ggsem/index.html","id":"installation-using-rstudio","dir":"","previous_headings":"","what":"Installation using RStudio","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"stable version ggsem can installed using install.packages() Comprehensive R Archive Network (CRAN). examples website use development version package, can directly downloaded using code :","code":"install.packages(c(\"dplyr\", \"semPlot\")) # Required to run ggsem app locally install.packages(\"ggsem\") install.packages(\"devtools\") devtools::install_github('smin95/ggsem')"},{"path":"https://smin95.github.io/ggsem/index.html","id":"running-the-ggsem-app","dir":"","previous_headings":"","what":"Running the ggsem App","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"ggsem app can initiated online using link: https://smin95.shinyapps.io/ggsem/. can also started locally RStudio: access updated tutorial (sample codes figures) package, please visit https://smin95.github.io/ggsem/.","code":"install.packages(c(\"ggsem\", \"dplyr\", \"semPlot\")) ggsem::ggsem()"},{"path":"https://smin95.github.io/ggsem/index.html","id":"disclosure","dir":"","previous_headings":"","what":"Disclosure","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"creation package part inspired blog post: https://drsimonj.svbtle.com/ggsem-plot-sem-models--ggplot2.","code":""},{"path":"https://smin95.github.io/ggsem/index.html","id":"issues-and-contact","dir":"","previous_headings":"","what":"Issues and contact","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"find issues ggsem (application package), please contact via email (seung.min@mail.mcgill.ca).","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"function modifies axis ranges ggplot object, optional user-specified ranges, additional buffers, ability enforce fixed aspect ratio. modified version adjust_axis_space().","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"","code":"adjust_axis_range(   plot,   x_range = NULL,   y_range = NULL,   buffer_percent = 0,   fixed_aspect_ratio = TRUE )"},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"plot ggplot object. plot whose axis ranges adjusted. x_range numeric vector length 2 specifying desired x-axis range. NULL, current x-axis range retained. Default NULL. y_range numeric vector length 2 specifying desired y-axis range. NULL, current y-axis range retained. Default NULL. buffer_percent numeric value indicating percentage additional space add axis range buffer. Default `0` (buffer). fixed_aspect_ratio logical value indicating whether maintain fixed aspect ratio plot. TRUE, function adjusts one axis preserve aspect ratio. Default TRUE.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"modified ggplot object adjusted axis ranges.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"- `x_range` `y_range` provided, values override current axis ranges. - `buffer_percent` parameter adds proportional space axis ranges, calculated   percentage range's width height. - `fixed_aspect_ratio` `TRUE`, function adjusts either x-axis y-axis   ensure plot maintains fixed aspect ratio.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Axis Range of a Plot of a ggplot2 Plot — adjust_axis_range","text":"","code":"# CSV files from ggsem app points_data <- data.frame( x = 20, y = 20, shape = 'rectangle', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, width_height_ratio = 1.6, orientation = 45, lavaan = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 10, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, network = FALSE, line_style = 'solid', locked = FALSE )  p <- csv_to_ggplot(points_data = points_data,               lines_data = lines_data,               zoom_level = 1.2, # Value from the ggsem app               horizontal_position = 0, # Value from the ggsem app               element_order = c('lines', 'points')) # order priority: lines < points   adjust_axis_range(p, x_range = c(-30,30), y_range= c(-30,30)) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"function allows users remove manage whitespace around graphical elements. supports asymmetrical adjustments boundary (left, right, bottom, top). Users can also maintain fixed aspect ratio required.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"","code":"adjust_axis_space(   plot,   x_adjust_left_percent = 0,   x_adjust_right_percent = 0,   y_adjust_bottom_percent = 0,   y_adjust_top_percent = 0,   fixed_aspect_ratio = TRUE )"},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"plot ggplot2 object. plot whose axis ranges need adjustment. x_adjust_left_percent Numeric. Percentage expand left boundary x-axis. Default 0. x_adjust_right_percent Numeric. Percentage expand right boundary x-axis. Default 0. y_adjust_bottom_percent Numeric. Percentage expand bottom boundary y-axis. Default 0. y_adjust_top_percent Numeric. Percentage expand top boundary y-axis. Default 0`. fixed_aspect_ratio Logical. TRUE, maintains fixed aspect ratio (1:1). `FALSE`, allows independent scaling x y axes. Default TRUE.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"ggplot2 object adjusted axis ranges. adjusted plot retains original attributes compatible additional ggplot2 layers themes.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"- **Percentage Adjustments:** percentages provided axis boundary calculated based current axis range. example, x_adjust_left_percent = 10 expands left boundary 10 - **Fixed Aspect Ratio:** fixed_aspect_ratio = TRUE, function adjusts either x-axis y-axis maintain 1:1 aspect ratio. larger adjustment determines scaling axes.","code":""},{"path":"https://smin95.github.io/ggsem/reference/adjust_axis_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Surrounding White Space of a ggplot2 Plot — adjust_axis_space","text":"","code":"# CSV files from ggsem app points_data <- data.frame( x = 20, y = 20, shape = 'rectangle', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, width_height_ratio = 1.6, orientation = 45, lavaan = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 10, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, network = FALSE, line_style = 'solid', locked = FALSE )  p <- csv_to_ggplot(points_data = points_data,               lines_data = lines_data,               zoom_level = 1.2, # Value from the ggsem app               horizontal_position = 0, # Value from the ggsem app               element_order = c('lines', 'points')) # order priority: lines < points   adjust_axis_space(p, x_adjust_left_percent = 10, x_adjust_right_percent = 10,              y_adjust_bottom_percent = 5, y_adjust_top_percent = 5) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"function converts CSV files exported ggsem Shiny app customizable ggplot object. resulting plot compatible ggplot2 functions, allowing users modify (e.g., adding titles annotations).","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"","code":"csv_to_ggplot(   points_data = NULL,   lines_data = NULL,   annotations_data = NULL,   loops_data = NULL,   element_order = c(\"lines\", \"points\", \"self_loops\", \"annotations\"),   zoom_level = 1.2,   horizontal_position = 0,   vertical_position = 0,   n = 100 )"},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"points_data data frame containing point data exported ggsem Shiny app. Default NULL. lines_data data frame containing line data exported ggsem Shiny app. Default `NULL`. annotations_data data frame containing text annotation data exported ggsem Shiny app. Default NULL. loops_data data frame containing self-loop arrow data exported ggsem Shiny app. Default NULL. element_order character vector specifying order graphical elements added plot. example: c(\"lines\", \"points\", \"self_loops\", \"annotations\"). Later elements appear top. Default includes elements. zoom_level numeric value controlling zoom level plot. value >1 zooms ; <1 zooms . Default 1.2. horizontal_position numeric value shift plot horizontally. Default 0. vertical_position numeric value shift plot vertically. Default 0. n Number points used interpolation gradient curved lines. Default 100.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"ggplot object axis_ranges attribute specifying x y axis ranges adjustments.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"- function uses `coord_fixed` ensure square plotting space uniform scaling. - `element_order` parameter determines layering graphical elements, later elements   appearing top. - `axis_ranges` attribute attached plot additional programmatic access.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert CSV Files (from ggsem Shiny App) to a ggplot Object — csv_to_ggplot","text":"","code":"# CSV files from ggsem app points_data <- data.frame( x = 20, y = 20, shape = 'rectangle', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, width_height_ratio = 1.6, orientation = 45, lavaan = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 10, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, network = FALSE, line_style = 'solid', locked = FALSE )  csv_to_ggplot(points_data = points_data,               lines_data = lines_data,               zoom_level = 1.2, # Value from the ggsem app               horizontal_position = 0, # Value from the ggsem app               element_order = c('lines', 'points')) # order priority: lines < points"},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Text Annotations to a ggplot Object — draw_annotations","title":"Draw Text Annotations to a ggplot Object — draw_annotations","text":"function overlays text annotations onto ggplot object. particularly useful adding annotations CSV files generated ggsem Shiny app can also used custom annotation data.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Text Annotations to a ggplot Object — draw_annotations","text":"","code":"draw_annotations(p, annotations_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Text Annotations to a ggplot Object — draw_annotations","text":"p ggplot object. plot annotations added. annotations_data data frame containing annotation information. Typically, comes CSV file generated ggsem Shiny app. required columns include: text: text annotate (character). x, y: coordinates text (numeric). font: font family use (character, e.g., \"serif\"). size: size text (numeric). color: color text (character, valid hex color). angle: rotation angle text (numeric, degrees). alpha: transparency text (numeric, 0 1). fontface: font style (character, e.g., \"bold\"). math_expression: Logical, whether text parsed mathematical expression. zoom_level Numeric. Adjusts size annotations based zoom level. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Text Annotations to a ggplot Object — draw_annotations","text":"ggplot object specified annotations added.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Text Annotations to a ggplot Object — draw_annotations","text":"","code":"library(ggplot2)  annotations_data <- data.frame( text = 'Square One', x = 26, y = 300, font = 'serif', size = 20, color = '#000000', angle = 0, alpha = 1, fontface = 'bold', math_expression = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  p <- ggplot()  draw_annotations(p, annotations_data, zoom_level = 1.2)"},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Lines on a ggplot Object from Line Data — draw_lines","title":"Draw Lines on a ggplot Object from Line Data — draw_lines","text":"function overlays lines arrows ggplot object based line data. supports straight lines, curved lines, gradient color transitions, one-way two-way arrows. data can come CSV file generated ggsem Shiny app custom input.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Lines on a ggplot Object from Line Data — draw_lines","text":"","code":"draw_lines(p, lines_data, zoom_level = 1, n = n)"},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Lines on a ggplot Object from Line Data — draw_lines","text":"p ggplot object lines added. lines_data data frame containing line information. expected columns include: x_start, y_start: Starting coordinates line. x_end, y_end: Ending coordinates line. ctrl_x, ctrl_y: Control points curved lines (optional). type: Type line (\"Straight Line\", \"Curved Line\", \"Straight Arrow\", \"Curved Arrow\"). color: Start color line (hexadecimal color code). end_color: End color line gradients (hexadecimal color code). color_type: \"Gradient\" gradient lines, \"Single\" solid-colored lines. gradient_position: Position gradient transition along line (numeric, 0 1). width: Width line (numeric). alpha: Transparency line (numeric, 0 1). arrow: Logical, whether arrowhead used. arrow_type: Type arrow (\"open\", \"closed\", etc.). arrow_size: Size arrowhead. two_way: Logical, whether line two arrowheads (bidirectional). line_style: Line style (\"solid\", \"dashed\", \"dotted\"). zoom_level Numeric. Adjusts size line widths arrowheads relative plot. Default 1. n Integer. Number points interpolation gradient curved lines. Default 100.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Lines on a ggplot Object from Line Data — draw_lines","text":"ggplot object specified lines arrows added.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Lines on a ggplot Object from Line Data — draw_lines","text":"","code":"library(ggplot2)  lines_df <- data.frame( x_start = 2, y_start = -2, x_end = 6, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, network = FALSE, line_style = 'solid', locked = FALSE )  p <- ggplot()  draw_lines(p, lines_data = lines_df, zoom_level = 1.2, n = 200)"},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Self-loop Arrows on a ggplot Object — draw_loops","title":"Draw Self-loop Arrows on a ggplot Object — draw_loops","text":"function overlays self-loop arrows ggplot object based data describing positions, sizes, orientations, styles. Self-loop arrows can drawn one direction bidirectionally customizable parameters color, width, arrow type. data can come CSV file generated ggsem Shiny app custom input.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Self-loop Arrows on a ggplot Object — draw_loops","text":"","code":"draw_loops(p, loops_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Self-loop Arrows on a ggplot Object — draw_loops","text":"p ggplot object self-loop arrows added. loops_data data frame containing information self-loop arrows. expected columns include: x_center, y_center: Center coordinates loop. radius: Radius loop. color: Color loop (hexadecimal color code). width: Width loop line (numeric). alpha: Transparency loop line (numeric, 0 1). arrow_type: Type arrow (\"closed\" \"open\"). arrow_size: Size arrowhead. gap_size: Size gap loop, specified fraction full circle (numeric, 0 1). loop_width, loop_height: Width height scaling factors loop. orientation: Rotation angle loop degrees. two_way: Logical, whether loop bidirectional (adds arrows ends). zoom_level Numeric. Adjusts size line widths arrowheads relative plot. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Self-loop Arrows on a ggplot Object — draw_loops","text":"ggplot object specified self-loop arrows added.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Self-loop Arrows on a ggplot Object — draw_loops","text":"","code":"library(ggplot2)  loops_data <- data.frame( x_center = -5, y_center = 5, radius = 2, color = '#000000', width = 1, alpha = 1, arrow_type = 'closed', arrow_size = 0.1, gap_size = 0.2, loop_width = 5, loop_height = 5, orientation = 0, two_way = FALSE, locked = FALSE )  p <- ggplot()  draw_loops(p, loops_data, zoom_level = 1.2)"},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Points on a ggplot Object — draw_points","title":"Draw Points on a ggplot Object — draw_points","text":"function overlays points ggplot object using data CSV file generated ggsem Shiny app custom dataset. Points can styled various shapes, colors, sizes, orientations.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Points on a ggplot Object — draw_points","text":"","code":"draw_points(p, points_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Points on a ggplot Object — draw_points","text":"p ggplot object points added. points_data data frame containing information points drawn. expected columns include: x, y: Coordinates point. shape: Shape point (\"circle\", \"square\", \"triangle\", \"rectangle\", \"oval\", \"diamond\"). color: Fill color point (hexadecimal color code). size: Size point. border_color: Border color point (hexadecimal color code). border_width: Width border. alpha: Transparency point (numeric, 0 1). width_height_ratio: Ratio width height (shapes like rectangles ovals). orientation: Rotation angle point degrees (shapes like rectangles diamonds). zoom_level Numeric. Adjusts size points relative plot. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Points on a ggplot Object — draw_points","text":"ggplot object specified points added.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Points on a ggplot Object — draw_points","text":"","code":"library(ggplot2)  points_data <- data.frame( x = 20, y = 20, shape = 'rectangle', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, width_height_ratio = 1.6, orientation = 45, lavaan = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  p <- ggplot()  draw_points(p, points_data, zoom_level = 1.2) + scale_x_continuous(limits = c(0,50)) + scale_y_continuous(limits = c(0,50))"},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get axis range of a ggplot object — get_axis_range","title":"Get axis range of a ggplot object — get_axis_range","text":"function calculate range x- y- axes.","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get axis range of a ggplot object — get_axis_range","text":"","code":"get_axis_range(plot)"},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get axis range of a ggplot object — get_axis_range","text":"plot ggplot output csv_to_ggplot()","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get axis range of a ggplot object — get_axis_range","text":"list object two elements, two vector values. first element stores minimum maximum values plot's x-axis range, second element stores minimum maximum values plot's y-axis range.","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get axis range of a ggplot object — get_axis_range","text":"","code":"library(ggplot2) ggplot(mtcars) + geom_point(aes(mpg, disp)) -> p1 get_axis_range(p1) #> $x_range #> [1]  9.225 35.075 #>  #> $y_range #> [1]  51.055 492.045 #>"},{"path":"https://smin95.github.io/ggsem/reference/ggsem.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ggsem (shiny app) locally through a browser — ggsem","title":"Run ggsem (shiny app) locally through a browser — ggsem","text":"Run ggsem (shiny app) locally browser","code":""},{"path":"https://smin95.github.io/ggsem/reference/ggsem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ggsem (shiny app) locally through a browser — ggsem","text":"","code":"ggsem()"},{"path":"https://smin95.github.io/ggsem/reference/ggsem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ggsem (shiny app) locally through a browser — ggsem","text":"return value, called side effects","code":""},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ggsem (shiny app) locally through a browser — launch","title":"Run ggsem (shiny app) locally through a browser — launch","text":"Run ggsem (shiny app) locally browser","code":""},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ggsem (shiny app) locally through a browser — launch","text":"","code":"launch()"},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ggsem (shiny app) locally through a browser — launch","text":"return value, called side effects","code":""},{"path":"https://smin95.github.io/ggsem/reference/save_figure.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a ggplot Object with Adjusted Dimensions — save_figure","title":"Save a ggplot Object with Adjusted Dimensions — save_figure","text":"function saves ggplot object (created 'csv_to_ggplot()' function) file dimensions automatically determined based x-axis y-axis ranges plot. size output can controlled using addtional arguments.","code":""},{"path":"https://smin95.github.io/ggsem/reference/save_figure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a ggplot Object with Adjusted Dimensions — save_figure","text":"","code":"save_figure(   filename,   plot,   units = \"in\",   dpi = 300,   aspect_ratio = NULL,   scale_factor = 0.11,   ... )"},{"path":"https://smin95.github.io/ggsem/reference/save_figure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a ggplot Object with Adjusted Dimensions — save_figure","text":"filename string. name output file (e.g., \"plot.png\"). plot ggplot object save. units string. Units width height. Default \"\" (inches). options include \"cm\" \"mm\". dpi Numeric. Resolution output file dots per inch. Default 300. aspect_ratio Numeric NULL. provided, fixes aspect ratio plot (e.g., 1 square). NULL, uses natural data aspect ratio. Default NULL. scale_factor Numeric. scaling factor control overall size saved plot. Default 0.11. ... Additional arguments passed ggsave().","code":""},{"path":"https://smin95.github.io/ggsem/reference/save_figure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a ggplot Object with Adjusted Dimensions — save_figure","text":"Saves ggplot object specified file return value.","code":""},{"path":"https://smin95.github.io/ggsem/reference/save_figure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a ggplot Object with Adjusted Dimensions — save_figure","text":"","code":"if (FALSE) { # \\dontrun{ # CSV files from ggsem app points_data <- data.frame( x = 20, y = 20, shape = 'rectangle', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, width_height_ratio = 1.6, orientation = 45, lavaan = FALSE, lavaan = FALSE, network = FALSE, locked = FALSE )  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 10, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, network = FALSE, line_style = 'solid', locked = FALSE )  p <- csv_to_ggplot(points_data = points_data,               lines_data = lines_data,               zoom_level = 1.2, # Value from the ggsem app               horizontal_position = 0, # Value from the ggsem app               element_order = c('lines', 'points')) # order priority: lines < points   p1 <- adjust_axis_range(p, x_adjust_left_percent = 10, x_adjust_right_percent = 10,              y_adjust_bottom_percent = 5, y_adjust_top_percent = 5)   # Save with default scaling save_figure(\"p1.png\", p1) } # }"},{"path":"https://smin95.github.io/ggsem/reference/valid_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate logical input — valid_logical","title":"Validate logical input — valid_logical","text":"Validate logical input","code":""},{"path":"https://smin95.github.io/ggsem/reference/valid_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate logical input — valid_logical","text":"","code":"valid_logical(x)"},{"path":"https://smin95.github.io/ggsem/reference/valid_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate logical input — valid_logical","text":"x value indicating logical input.","code":""},{"path":"https://smin95.github.io/ggsem/reference/valid_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate logical input — valid_logical","text":"logical value (TRUE FALSE). Defaults FALSE.","code":""}]
