[{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-points","dir":"Articles","previous_headings":"","what":"Adding Points","title":"4. Annotating Any ggplot Object","text":"load CSV output points using read_csv() function, paste base plot (p) using draw_points().","code":"points_data <- read_csv(\"https://www.smin95.com/points.csv\") p1 <- draw_points(p, points_data)  p1 #> Warning: Removed 33 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-lines","dir":"Articles","previous_headings":"","what":"Adding Lines","title":"4. Annotating Any ggplot Object","text":"load CSV output lines using read_csv() function, paste base plot (p1) using draw_lines(). CSV output contains information gradient lines, resolution color gradient can adjusted argument n draw_lines(). default set n = 500 fine resolution can quite slow.","code":"lines_data <- read_csv(\"https://www.smin95.com/lines.csv\") p2 <- draw_lines(p1, lines_data, n = 100) p2 #> Warning: Removed 33 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-text-annotations","dir":"Articles","previous_headings":"","what":"Adding Text Annotations","title":"4. Annotating Any ggplot Object","text":"load CSV output annotations using read_csv() function, paste base plot (p2) using draw_annotations().","code":"annotations_data <- read_csv(\"https://www.smin95.com/annotations.csv\") p3 <- draw_annotations(p2, annotations_data) p3 #> Warning: Removed 33 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"adding-self-loop-arrows","dir":"Articles","previous_headings":"","what":"Adding Self-loop Arrows","title":"4. Annotating Any ggplot Object","text":"load CSV output self-loop arrows using read_csv() function, paste base plot (p3) using draw_loops().","code":"loops_data <- read_csv(\"https://www.smin95.com/loops.csv\") p4 <- draw_loops(p3, loops_data) p4 #> Warning: Removed 33 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://smin95.github.io/ggsem/articles/annotations.html","id":"math-expressions","dir":"Articles","previous_headings":"","what":"Math Expressions","title":"4. Annotating Any ggplot Object","text":"ggsem app also provides support adding math expressions. write math expressions, Text Annotation Inputs menu, make sure check box Use Math Expression (orange box), Text follow syntax math expressions function parse(). ggsem app, can just write strings without function parse().  examples: can also added directly ggplot object. example, annotations_data data frame CSV structure ggsem app, contains math expressions:","code":"x^2 # superscript x[2] # subscript alpha # greek letter beta # greek letter x^2 + y[2] == sqrt(alpha * beta) # a formula using above all four library(ggplot2) annotations_data <- data.frame(   text = 'x^2 + y[2] == sqrt(alpha * beta)', x = 26, y = 300, font = 'serif',   size = 20, color = '#000000', angle = 0, alpha = 1,   fontface = 'bold', math_expression = TRUE,   lavaan = FALSE )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_annotations(p, annotations_data)"},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"launching-the-app","dir":"Articles","previous_headings":"","what":"Launching the app","title":"1. Drawing Elements","text":"begin , let’s run app locally using code (faster online: https://smin95.shinyapps.io/ggsem/):","code":"install.packages(\"devtools\") devtools::install_github(\"smin95/ggsem\")  ggsem::launch()"},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"the-apps-layout","dir":"Articles","previous_headings":"Launching the app","what":"The app’s layout","title":"1. Drawing Elements","text":"picture shows ggsem app. First, ’s space plots rendered (red box). left side, menu. begins dropdown menu Element Selection, allowing users choose type graphical elements add plotting space (inside purple box). five options Element Selection: Point, Line, Text Annotation, Self-loop Arrow, Lavaan Input. Element Selection, users can select order layer graphical elements displayed (inside blue box). default set points front. words, line point overlap, point mask line. Next, slider Zoom Level (within green box). default set factor 1.2x can increased zoom (way factor 10). , sliders Horizontal Position Vertical Position (green box). changes focus plotting space displayed. instance, point cutoff right side plotting space space enough, simply adjust slider Horizontal Position. Furthermore, Undo Redo buttons (yellow box). correspond CTRL + Z CTRL + Y. respectively. illustrate, accidently deleted line, simply click Undo button cancel previous action. app remembers steps inputs, Undo button can work way back beginning. Finally, menu (within orange box) specific input depending selected menu Chose Element Type. Without ado, let’s add graphical elements see options interact together.","code":""},{"path":[]},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-points","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Points","title":"1. Drawing Elements","text":"Lets begin adding point. default coordinate X Y position corresponds origin (0, 0). point created, users can hover mouse point point realize center point X = 0 Y = 0, shown bottom-left plotting space. Users can provide several inputs specify aesthetics point. includes X Y coordinates, also filling color (Point Color), shape (Select Shape), size (Point Size), width border (Border Width), color border (Border Color), alpha level (Point Alpha). , can draw square point setting inputs shown : X Coordinate: 5 Y Coordinate: 5 Point Color: #D0C5ED Select Shape: square Point Size: 50 Border Width: 2 Border Color: #9646D4 Point Alpha: 1 specified, please click Add Point button (pink box) render output. make mistakes, can click Undo button cancel changes.  Notice output just created now part output table points (within green box). Users can directly change values within table directly change aesthetics selected element, delete selected row (rows). Simply click row interest, click Delete Selected Point (green box).","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-lines","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Lines","title":"1. Drawing Elements","text":"Next, add line selecting Line dropdown menu Choose Element Type. numerous parameters aesthetics users can specify. can start drawing black line coordinates (leave default inputs unchanged): Start X Coordinate: 2 Start Y Coordinate: -2 End X Coordinate: 8 End Y Coordinate: -2  Add Line button clicked, line drawn purple square. line single color, specified dropdown menu Line Color Type. Next, draw curved line, whose curvature automatically adjusted based X Y coordinates line segment can manually adjusted controlling Control Point X Control Point Y. Additionally, can set gradient two colors setting Gradient. choose Gradient, conditional color menu appear (End Color), well Gradient Intersection, slider allows us give fine control gradient occurs line segment’s length. Start X Coordinate: 2 Start Y Coordinate: 12 End X Coordinate: 8 End Y Coordinate: 12 Start Color: #F57373 Line Color Type: Gradient End Color: #53F26D Gradient Intersection: 0.5 Line Width: 2 Line Alpha: 1 Line Type: Curved Line gradient intersection either close 0 1, display one color . instance, set 0.01, End Color dominate line segment.  Next, add arrow setting dropdown menu Line Type Straight Arrow, parameters : Start X Coordinate: 18 Start Y Coordinate: 5 End X Coordinate: 12 End Y Coordinate: 5 Start Color: #9E9E9E Line Color Type: Gradient End Color: #54F5AF Gradient Intersection: 0.2 Line Width: 2 Line Alpha: 1 Line Type: Straight Arrow  Leave inputs intact, Arrow Type (open closed arrowheads) Arrow Size (size arrow head).","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-text-annotations","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Text Annotations","title":"1. Drawing Elements","text":"Now, add text annotation beside end arrow, labelled “Square One” using inputs : Text: Square One X Coordinate: 26 Y Coordinate: 5 Font: sans Text Size: 20 Color: #000000 Angle (deg): 0 Text Alpha: 1 Typeface: Bold Add Text button pressed, text “Square One”” rendered. However, see text cutoff right side enough plotting space. X Y coordinates text refer position text’s center. , use slider Horizontal Position re-adjust focus plotting space: Horizontal Position: 8","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"adding-self-loop-arrows","dir":"Articles","previous_headings":"Adding Elements","what":"Adding Self-loop Arrows","title":"1. Drawing Elements","text":"Finally, can add circular self-loop arrow plotting output using inputs : X Coordinate (Center): -5 Y Coordinate (Center): 5 Radius: 2 Line Width: 1 Line Color: #000000 Line Alpha: 1 Arrow Type: closed Arrow Size: 0.1 Loop Width: 1 Loop Height: 1 generate self-loop arrow left side Add Self-loop Arrow button clicked. Note also Apply Changes Lock Self-loop Arrows buttons. Apply Changes button: Changes currently existing self-loop arrows’ Gap Size (two ends arrow) Loop Orientation (deg). Lock Self-Loop Arrows button: Makes currently existing self-loop arrows immune subsequent usages Apply Changes button. press satisfied current orientation gap size existing self-loop arrow.","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"saving-data-and-graphics","dir":"Articles","previous_headings":"Adding Elements","what":"Saving Data and Graphics","title":"1. Drawing Elements","text":"Notice whenever add graphical element onto plotting space, output table gets updated. four tables total: 1) Points Table, 2) Lines Table, 3) Annotations Table, 4) Self-loop Arrows Table. Users can directly manipulate aesthetics elements modifying numiercal inputs table, x Y coordinates alpha level. can also save CSV files, close ggsem app, load continue working figures later future. download four tables, go dropdown menu Choose CSV Download, click button Download Selected CSV, four tables. reload CSV files back app, users can click Browse Upload CSV Files locate CSV files interest. output image can also exported either PNG, JPEG, PDF SVG.  picture directly exported PNG output shiny app.","code":""},{"path":"https://smin95.github.io/ggsem/articles/elements.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"1. Drawing Elements","text":"plot generated can recreated ggplot object RStudio using function csv_to_ggplot(), might take time run CSV line include gradient settings. reduce time, can choose reduce value n (default value = 100) lower value, argument used set resolution gradient coloring curvature line. can save figure PNG file verify whether identical one drawn ggsem Shiny app. , set width = 9 height = 9 dimension exported image file.  can also add plot light-grey (grey90) background graphical output using typical ggplot2 functions change range y-axis. can save figure using ggsave().  can also chip away extra space directly dealing axis limits figure. First, extract current range y-axis limit p2 object using function get_axis_range(), one argument (ggplot object). y-axis spans -22 22. can reduce space top bottom (y-axis range: -8 19). , need use function coord_cartesian(). can also modify range x-axis slightly (-9 30). , save figure using ggsave(). successfully cropped empty space recreated figure appear Shiny app using ggplot2 workflow. height width arguments might need tested attempts find best ones (takes practice!). Essentially, csv_to_ggplot() returns ggplot object ratio fixed 1, allowing plots appear exactly Shiny app. However, x y limits must changed ggplot2 workflow (example), ratio must broken (function coord_cartesian()). changes relative spacing visual elements plot. , ratio set setting width height output image file, width = 5.5 height = 2.3. Tip: plot gets cut-, either increase width height () ggsave().","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/points.csv\") lines_data <- read_csv(\"https://www.smin95.com/lines.csv\") annotations_data <- read_csv(\"https://www.smin95.com/annotations.csv\") loops_data <- read_csv(\"https://www.smin95.com/loops.csv\")  p1 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = annotations_data,   loops_data = loops_data,   zoom_level = 1.2, # From the ggsem app   horizontal_position = 8, # From the ggsem app   vertical_position = 0,   n = 100 ) # Default vertical position on the app ggsave(\"p1.png\", p1, width = 9, height = 9) p2 <- p1 + theme(   plot.background = element_rect(fill = \"grey90\", color = NA) # Grey background, no border ) ggsave(\"p2.png\", p2, width = 9, height = 9) get_axis_range(p2) #> $x_range #> [1] -18.4  34.4 #>  #> $y_range #> [1] -26.4  26.4 p2b <- p2 + coord_cartesian(ylim = c(-8, 19)) p2c <- p2b + coord_cartesian(xlim = c(-9, 30)) ggsave(\"p2c.png\", p2c, width = 5.5, height = 2.3)"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"the-lavaan-packages-syntax","dir":"Articles","previous_headings":"","what":"The lavaan Package’s Syntax","title":"3. Visualizing Structural Equation Modeling Diagrams","text":"psychology, lavaan package widely used structural equation modeling (SEM) R. integrates methods factor analysis, regression models path analysis coherent framework, allowing researchers study different variables related one another. Basically, models can specified using strings particular syntax lavaan package. example, three latent variables (reading, math music) nine observed variables (x1 x9). latent variable can inferred set data variables directly observed. Usually, captures index easily measured quantified. string =~ syntax lavaan, often used define relationship latent observed variables. can translated “measured ” “indicated ”. instance, music   =~ x7 + x8 + x9 means latent variable music can measured three variables x7, x8, x9, sense rhythm, reading ability music scores, aptitude learning play musical instrument. words, =~operator lavaan denotes one-way direction. convention, semPlot package, one-way arrow drawn latent variable observed variable Therefore, translate strings , reading can measured x1, x2 x3 variables (ex. language), math can measured x4, x5 x6 variables, music can measured x7, x8 x9 variables. Additionally, ~ operator indicates causal relationship independent variable dependent variable. also one-way relationship. instance, one’s stamina high, one’s running distance much longer. ~ (regression) =~ shown one-way arrow SEM diagrams, recognized ggsem app similar fashion semPlot. ‘~~’ refers covariance, ggsem plots two-way arrow (straight rather curved) just like semPlot (curved).","code":"# latent variable definitions reading =~ x1 + x2 + x3 math =~ x4 + x5 + x6 music =~ x7 + x8 + x9  music ~~ math running distance ~ stamina"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"drawing-lavaan-input","dir":"Articles","previous_headings":"","what":"Drawing lavaan input","title":"3. Visualizing Structural Equation Modeling Diagrams","text":"Let’s run app locally using code (faster online: https://smin95.shinyapps.io/ggsem/):  can start visualizing SEM diagram using strings: string already written text area Lavaan Syntax Lavaan Input menu. readers want supply models, delete sample string. important inputs drawing SEM diagram lavaan model. Relative X Node Position: Relative horizontal spacing points. larger distance, larger horizontal gap. Relative Y Node Position: Relative vertical spacing points. larger distance, larger vertical gap. Line Endpoint Spacing: Spacing node edge’s endpoint. Latent Variable Color: Color nodes represent latent variables. Observed Variable Color: Color nodes represent observed variables. Latent Variable Size: size nodes represent latent variables. Observed Variable Size: size nodes represent observed variables. Choose Layout Algorithms: Layout nodes edges. layouts semPlot package. include Tree, Circle, Spring, Tree2, Circle2 Default. adjust inputs : Relative Node X Position: 20 Relative Node Y Position: 20 Line Endpoint Spacing: 4 Latent Variable Color: #FAAACB Observed Variable Color: #F7D7EF Latent Variable Size: 75 Observed Variable Size: 58 Choose Layout Algorithms: Spring additional inputs can adjusted changed example. setting inputs specified, can click Draw SEM button (orange box), creates new graphical outputs. Apply Changes button (purple box) modifies aesthetics existing graphical outputs created Lavaan Input menu. , wish change layout (Spring Tree) keeping aesthetics unchanged, can simply change layout Choose Layout Algorithms Tree, click Apply Changes button. important know Apply Changes button modifies aesthetics graphical elements created Lavaan Input menu menus. example, users create self-loop arrows later, arrows affected Apply Changes button Lavaan Input menu produced together lavaan strings. identify components generated lavaan, check lavaan column output tables; set TRUE, part lavaan output, susceptible aesthetic changes brought Apply Changes button. self-loop arrows, lavaan column set FALSE. Readers can also explore rest layout choices see layout affects SEM diagram. , can save CSV outputs points, lines text annotations ggsem app. Also, satisfied current look SEM, can also change numerical inputs table directly, X Y coordinates points, lines texts. Optional exercise: Readers can replace straight two-way arrow curved two-way arrow music math removing straight two-way arrow via Lines Table first, adding curved two-way arrow Line Elements.","code":"ggsem::launch() # latent variable definitions reading =~ x1 + x2 + x3 math =~ x4 + x5 + x6 music =~ x7 + x8 + x9  music ~~ math"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"modifying-the-sem-diagram-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the SEM Diagram from ggsem app in ggplot2 Workflow","title":"3. Visualizing Structural Equation Modeling Diagrams","text":"Next, create empty space, can included increasing range y-axis. First, extract x y ranges using get_axis_range() modify y-axis range using coord_cartesian(). Now, can add title using function annotate(). convenient affect scaling figure’s components (unlike ggtitle()).","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/sem_points.csv\") lines_data <- read_csv(\"https://www.smin95.com/sem_lines.csv\") texts_data <- read_csv(\"https://www.smin95.com/sem_annotations.csv\")  sem_plot <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = texts_data,   element_order = c(\"lines\", \"points\", \"annotations\") ) # order priority: lines < points < texts ggsave(\"sem_plot.png\", sem_plot, width = 9, height = 9) get_axis_range(sem_plot) #> $x_range #> [1] -26.4  26.4 #>  #> $y_range #> [1] -26.4  26.4 sem_plot2 <- sem_plot +   coord_cartesian(ylim = c(-26.4, 30)) sem_plot2b <- sem_plot2 +   annotate(\"text\",     label = \"Intelligence Measure (SEM)\", x = 0, y = 28, size = 7,     fontface = \"bold\"   ) ggsave(\"sem_plot2b.png\", sem_plot2b, width = 7, height = 8)"},{"path":"https://smin95.github.io/ggsem/articles/lavaan.html","id":"hacking-the-csv-outputs-from-ggsem-app","dir":"Articles","previous_headings":"","what":"Hacking the CSV Outputs from ggsem app","title":"3. Visualizing Structural Equation Modeling Diagrams","text":"can also modify CSV outputs converting ggplot object. Notice font texts SEM diagram faint, can bold directly replacing values fontface column texts_data , can recreate figure using csv_to_ggplot().  modification SEM diagram ggplot2 end , however. think size latent variable bit small. increase modifying CSV file points_data. ggsem automatically assigns circle latent variables square observed variables, standard SEM diagrams. , can first identify latent variables rows data frame circle points, modify size. save indices selectively increase size points 100. , can recreate figure csv_to_ggplot().  summary, outputs ggsem app can directly modified using ggplot2 workflow, making every graphical element computationally reproducible. personally prefer get general diagram way using app, modify details using ggplot2 directly, demonstrated . might differ among different users.","code":"texts_data$fontface <- \"bold\" sem_plot3 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = texts_data,   element_order = c(\"lines\", \"points\", \"annotations\") ) +   coord_cartesian(ylim = c(-26.4, 30)) +   annotate(\"text\",     label = \"Intelligence Measure (SEM)\", x = 0, y = 28, size = 7,     fontface = \"bold\"   ) ggsave(\"sem_plot3.png\", sem_plot3, width = 7, height = 8) which(points_data$shape == \"circle\") # three indices are row numbers for latent variables #> [1] 10 11 12 latent_variable_index <- which(points_data$shape == \"circle\") points_data[latent_variable_index, ]$size <- 100 sem_plot4 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   annotations_data = texts_data,   element_order = c(\"lines\", \"points\", \"annotations\") ) +   coord_cartesian(ylim = c(-26.4, 30)) +   annotate(\"text\",     label = \"Intelligence Measure (SEM)\", x = 0, y = 28, size = 7,     fontface = \"bold\"   ) ggsave(\"sem_plot4.png\", sem_plot4, width = 7, height = 8)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"network-layouts-of-points-nodes","dir":"Articles","previous_headings":"","what":"Network Layouts of Points (Nodes)","title":"2. Plotting Networks","text":"ggsem app provides numerous layouts, derived igraph package. instance, users draw 10 points clicking Add Point button 10 times, choose certain layout, points can sorted network configuration using inputs Draw Networks menu. Let’s start creating 10 points clicking Add Point button 10 times. Since located origin (X = 0, Y = 0), overlapped plotting area. able see one black point. confirm whether 10 points, check Points Table see 10 rows total (blue rectangle figure). Draw Networks part menu, important inputs. : Layout Type: eight provided layouts: 1) Circle, 2) Grid, 3) Random, 4) Star, 5) Fruchterman-Reingold, 6) Kamada-Kawai, 7) Horizontal Straight Line, 8) Vertical Straight Line. Point Distance: Relative distance two neighboring points/nodes. Center X Position: X coordinate network’s center. Center Y Position: Y coordinate network’s center. Gradient Start Color: first color gradient. Gradient End Color: second color gradient. three additional buttons. : Auto-layout Points: click button (least two unlocked points), points arranged specific configuration based Layout Type input. Apply Gradient: click button (least two unlocked points), filling color points gradient palette. Lock Points: button pressed, existing points Points Table become locked, becoming immune effect subsequent effects Auto-layout Points Apply Gradient. words, batch points arranged appropriately, click button keep characteristics (position color).  Now know inputs , let’s start setting layout 10 points : Layout Type: Circle click Auto-layout Points button, points sorted circle, whose center origin (X = 0, Y = 0) specified. Since, empty space middle, can add one point center (X = 0, Y = 0) clicking Add Point button. Next, can set gradient filling color points setting inputs : Gradient Start Color: #C0E1FC Gradient End Color: #44599E since 11 points currently unlocked (see locked column Points Table), gradient colors can applied clicking Apply Gradient. Now, small blue-colored network eleven points.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"connecting-the-points-in-a-network","dir":"Articles","previous_headings":"","what":"Connecting the Points in a Network","title":"2. Plotting Networks","text":"connect points navy network, can add lines, set (top dropdown menu): Choose Element Type: Line many ways poinst can connected lines (edges) using ggsem app. Let’s shift attention dropdown menu Choose Edge Connection Type Draw Networks. several options: Fully Connected: Connects edges pair nodes Nearest Neighbor: Links node closest neighbor. Connect Central Node: Links peripheral nodes central node (geometric center based coordinates). Connect Particular Node: Links nodes particular node choice. choosing menu, users supply ID number (Points Table’s first column) point Select Central Node. Random Graph: Links nodes random fashion based Erdos-Renyi model. different time. , practice, instead Connect Central Node, can choose option Connect Particular Node, find ID number central point Points Table, connect peripheral nodes central one. turns ID central node 11 coordinate X = 0 Y = 0. can choose aesthetics lines automatically generated : Edge Color: #CACFDB Edge Width: 2 Edge Alpha: 0.5 Edge Spacing controls space nodes endpoints edges.  Next, create another network using layout functions. , need lock points, later usages **Draw Networks* functions affect positions edge connections. , go back Point menu, click Lock Points button (orange rectangle) Draw Networks.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"drawing-a-second-network","dir":"Articles","previous_headings":"","what":"Drawing a Second Network","title":"2. Plotting Networks","text":"second network, let’s add 11 points clicking Add Point button 11 times. Make sure check Points Table see additional 11 rows (22 rows total). Set layout points : Layout Type: Random Point Distance: 8 Center X Position: 30 Center Y Position: 0 Gradient Start Color: #FFC2E7 Gradient End Color: #9E4468 , click Auto-layout Points Apply Gradient buttons.  , adjust focus plotting window setting: Zoom Level: 1.4 Horizontal Position: 16 Vertical Position: 0  Now, go back Line menu, automatically generate lines. can choose option Fully Connected aesthetics: Edge Color: #DBCAD3 Edge Width: 1 Edge Alpha: 0.3 , lock points Point menu clicking Lock Points, stabilize second network plotting space. can save CSV files points lines, load RStudio using typical ggplot2 workflow.","code":""},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"modifying-the-plot-from-ggsem-app-in-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Modifying the Plot from ggsem app in ggplot2 Workflow","title":"2. Plotting Networks","text":"first chapter, can modify plot output ggsem app usihg ggplot2 functions directly. use csv_to_ggplot() convert CSV outputs shiny app ggplot object. , set order elements points front lines using argument element_order. lines written first, followed points, points recently applied, hence takes order priority. use zoom_level, horizontal_position vertical_position ggsem app. Notice CSV files text annotations self-loop arrows. , provide , csv_to_ggplot() still runs smoothly. , unnecessary load empty CSV class graphical element previously added app. can save figure PNG file verify whether identical one drawn ggsem Shiny app. , set width = 9 height = 9 dimension exported image file. figure looks like:  can also add text annotations graphical output using typical ggplot2 functions, annotate(). First, extract plot’s ranges x-axis y-axis using get_axis_range(). Now know ranges, can decide exactly add text annotations. add texts top network.  Next, can remove extra white space around networks reducing ranges x- y-axes. , save figure using ggsave() width = 9 height = 6.3 (trials error!).","code":"library(tidyverse) library(ggsem)  # CSV files from ggsem app points_data <- read_csv(\"https://www.smin95.com/points2.csv\") lines_data <- read_csv(\"https://www.smin95.com/lines2.csv\")  p3 <- csv_to_ggplot(   points_data = points_data,   lines_data = lines_data,   zoom_level = 1.4, # From the ggsem app   horizontal_position = 14, # From the ggsem app   vertical_position = 0,   element_order = c(\"lines\", \"points\") ) # order priority: lines < points ggsave(\"p3.png\", p3, width = 9, height = 9) get_axis_range(p3) #> $x_range #> [1] -16.8  44.8 #>  #> $y_range #> [1] -30.8  30.8 p4 <- p3 + annotate(\"text\",   label = \"First Network\", x = 0, y = 16,   fontface = \"bold\", size = 8 ) +   annotate(\"text\",     label = \"Second Network\", x = 29, y = 16,     fontface = \"bold\", size = 8   ) p4b <- p4 + coord_cartesian(ylim = c(-12, 21), xlim = c(-9, 40)) ggsave(\"p4b.png\", p4b, width = 9, height = 6.3)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"hacking-the-csv-outputs-from-ggsem-app","dir":"Articles","previous_headings":"","what":"Hacking the CSV Outputs from ggsem app","title":"2. Plotting Networks","text":"can also hack CSV output values. , separately plot network combine using patchwork package. split points_data lines_data data frames. know first network eleven points ten lines, include points_data1 lines_data2, include rest points_data2 lines_data2. Next, separately convert CSV outputs two networks. Notice two plots, reduce zoom_level (1.4 0.7) remove surrounding empty space shift horizontal_position place network plotting space’s center. change zoom_level alter looks slightly. , can add title using ggtitle() plots. Next, using + operator patchwork, combine net1 net2 one ggplot2 object. can now save net_tgd image file using ggsave() function width = 12.5 height = 8.","code":"library(patchwork) # install.packages('patchwork')  points_data1 <- points_data[1:11, ] # First network's point points_data2 <- points_data[12:nrow(points_data), ]  lines_data1 <- lines_data[1:10, ] # First network's lines lines_data2 <- lines_data[11:nrow(lines_data), ] net1 <- csv_to_ggplot(   points_data = points_data1,   lines_data = lines_data1,   zoom_level = .7, # Zoom-in to remove extra space   horizontal_position = 0, # 0 because blue network's center is at X = 0, Y = 0   vertical_position = 0,   element_order = c(\"lines\", \"points\") )   net2 <- csv_to_ggplot(   points_data = points_data2,   lines_data = lines_data2,   zoom_level = .7, # Zoom-in to remove extra space   horizontal_position = 30, # 30 because red network's center is at X = 30, Y = 0   vertical_position = 0,   element_order = c(\"lines\", \"points\") ) net1b <- net1 + ggtitle(\"First Network\") +   theme(plot.title = element_text(hjust = 0.5)) + # Title is aligned to the center   theme(plot.title = element_text(size = 24, face = \"bold\")) # Font size of the title   net2b <- net2 + ggtitle(\"Second Network\") +   theme(plot.title = element_text(hjust = 0.5)) +   theme(plot.title = element_text(size = 24, face = \"bold\")) net_tgd <- net1b + net2b ggsave(\"net_tgd.png\", net_tgd, width = 12.5, height = 8)"},{"path":"https://smin95.github.io/ggsem/articles/networks.html","id":"labelling-the-nodes-with-ggplot2-workflow","dir":"Articles","previous_headings":"","what":"Labelling the Nodes with ggplot2 workflow","title":"2. Plotting Networks","text":"now discuss can label nodes using ggplot2 workflow. , label net1. start creating data frame text labels X Y coordinates. data frame texts_data contains three columns: 1) x: contains x coordinates point_data1, 2) y: contains y coordinates point_data1, 3) label: contains character strings. Next, use geom_text() label text annotations row (observation) texts_data. map coordinates labels within aes() columns data frame.  can improve visibility text node applying unique color adjusting text size. use custom colors geom_text(), scale_color_identity() also used ensure colors properly rendered.","code":"texts_data <- data.frame(   x = points_data1$x,   y = points_data1$y,   label = paste0(\"S\", 1:nrow(points_data1)) )  head(texts_data) #>           x            y label #> 1  10.00000 0.000000e+00    S1 #> 2   8.09017 5.877853e+00    S2 #> 3   3.09017 9.510565e+00    S3 #> 4  -3.09017 9.510565e+00    S4 #> 5  -8.09017 5.877853e+00    S5 #> 6 -10.00000 1.224606e-15    S6 net1 +   geom_text(aes(x = x, y = y, label = label), data = texts_data, fontface = \"bold\") cList <- c(   \"#494949\", \"#494949\", \"#5B5B5B\", \"#5B5B5B\", \"#EBEBEB\",   \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\", \"#EBEBEB\",   \"#FDFDFD\" ) # text color for each node label  texts_data$color <- cList  net1 +   geom_text(aes(x = x, y = y, label = label, color = color),     data = texts_data,     fontface = \"bold\", size = 5   ) +   scale_color_identity()"},{"path":"https://smin95.github.io/ggsem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Seung Hyun Min. Author, maintainer.","code":""},{"path":"https://smin95.github.io/ggsem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Min S (2024). ggsem: Interactively Visualize Structural Equation Modeling Diagrams. R package version 0.1.1, https://smin95.github.io/ggsem/.","code":"@Manual{,   title = {ggsem: Interactively Visualize Structural Equation Modeling Diagrams},   author = {Seung Hyun Min},   year = {2024},   note = {R package version 0.1.1},   url = {https://smin95.github.io/ggsem/}, }"},{"path":"https://smin95.github.io/ggsem/index.html","id":"installation-using-rstudio","dir":"","previous_headings":"","what":"Installation using RStudio","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"stable version ggsem can installed using install.packages() Comprehensive R Archive Network (CRAN). examples website use development version package, can directly downloaded using code :","code":"install.packages(\"ggsem\") install.packages(\"devtools\") devtools::install_github('smin95/ggsem')"},{"path":"https://smin95.github.io/ggsem/index.html","id":"running-the-ggsem-app","dir":"","previous_headings":"","what":"Running the ggsem App","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"ggsem app can initiated online using link: https://smin95.shinyapps.io/ggsem/. can also started locally RStudio (runs faster): access updated tutorial (sample codes figures) package, please visit https://smin95.github.io/ggsem/.","code":"ggsem::launch()"},{"path":"https://smin95.github.io/ggsem/index.html","id":"disclosure","dir":"","previous_headings":"","what":"Disclosure","title":"Interactively Visualize Structural Equation Modeling Diagrams","text":"creation package part inspired blog post: https://drsimonj.svbtle.com/ggsem-plot-sem-models--ggplot2.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","title":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","text":"function converts four CSV files ggsem Shiny app ggplot output object. ggplot output can modified using standard ggplot2 functions, ggtitle() annotate().","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","text":"","code":"csv_to_ggplot(   points_data = NULL,   lines_data = NULL,   annotations_data = NULL,   loops_data = NULL,   element_order = c(\"lines\", \"points\", \"self_loops\", \"annotations\"),   zoom_level = 1.2,   horizontal_position = 0,   vertical_position = 0,   n = 100 )"},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","text":"points_data object stores CSV file containing information points ggsem shiny app. default NULL. lines_data object stores CSV file containing information lines ggsem shiny app. default NULL. annotations_data object stores CSV file containing information text annotations ggsem shiny app. default NULL. loops_data object stores CSV file containing information self-loop arrows ggsem shiny app. default NULL. element_order Order graphical elements display. order graphical elements added. written later, gets added later (front), : c(\"lines\", \"points\", \"self_loops\", \"annotations\"), sets annotations added last (hence front). zoom_level numeric value control zoom level plot. Default 1.2. horizontal_position numeric value adjusting horizontal position plot. Default 0. vertical_position numeric value adjusting vertical position plot. Default 0. n Number points used interpolation (gradient lines curved lines). Default 100.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","text":"ggplot object returned function's output.","code":""},{"path":"https://smin95.github.io/ggsem/reference/csv_to_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert CSV files (from ggsem Shiny app) to ggplot output — csv_to_ggplot","text":"","code":"library(ggplot2)  # CSV files from ggsem app points_data <- data.frame( x = 5, y = 5, shape = 'square', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, locked = FALSE, lavaan = FALSE )  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 8, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = NA, color_type = 'Single', gradient_position = NA, width = 1, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, line_style = 'solid' )  csv_to_ggplot(points_data = points_data,               lines_data = lines_data,               zoom_level = 1.4, # From the ggsem app               horizontal_position = 14, # From the ggsem app               element_order = c('lines', 'points')) # order priority: lines < points #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","title":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","text":"function adds text annotations onto ggplot output (including plots created ggsem Shiny app).","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","text":"","code":"draw_annotations(p, annotations_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","text":"p ggplot2 object annotations_data object stores CSV file containing information text annotations ggsem Shiny app. zoom_level numeric value control zoom level plot. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","text":"ggplot object returned function's output.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write text annotations from an annotation CSV file (from ggsem Shiny app) on a ggplot object — draw_annotations","text":"","code":"library(ggplot2)  annotations_data <- data.frame( text = 'Square One', x = 26, y = 300, font = 'serif', size = 20, color = '#000000', angle = 0, alpha = 1, fontface = 'bold', math_expression = FALSE, lavaan = FALSE )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_annotations(p, annotations_data, zoom_level = 1.2)"},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","title":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","text":"function adds lines onto ggplot output (including plots created ggsem Shiny app).","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","text":"","code":"draw_lines(p, lines_data, zoom_level = 1, n = 100)"},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","text":"p ggplot object lines_data object stores CSV file containing information lines ggsem Shiny app. zoom_level numeric value control zoom level plot. Default 1. n Number points used interpolation (gradient lines curved lines). Default 100.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","text":"ggplot object returned function's output.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw lines from a line CSV File (from ggsem Shiny app) on a ggplot object — draw_lines","text":"","code":"library(ggplot2)  lines_data <- data.frame( x_start = 2, y_start = -2, x_end = 10, y_end = -2, ctrl_x = NA, ctrl_y = NA, type = 'Straight Line', color = '#000000', end_color = '#cc3d3d', color_type = 'Gradient', gradient_position = 0.35, width = 1.5, alpha = 1, arrow = FALSE, arrow_type = NA, arrow_size = NA, two_way = FALSE, lavaan = FALSE, line_style = 'solid' )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_lines(p, lines_data, zoom_level = 1.2, n = 400)"},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","title":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","text":"function adds self-loop arrows onto ggplot output (including plots created ggsem shiny app).","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","text":"","code":"draw_loops(p, loops_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","text":"p ggplot object loops_data object stores CSV file containing information self-loop arrows ggsem shiny app. zoom_level numeric value control zoom level plot. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","text":"ggplot object returned function's output.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_loops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw self-loop arrows from a self-loop arrow CSV file (from ggsem Shiny app) on a ggplot object — draw_loops","text":"","code":"library(ggplot2)  loops_data <- data.frame( x_center = -5, y_center = 5, radius = 2, color = '#000000', width = 1, alpha = 1, arrow_type = 'closed', arrow_size = 0.1, gap_size = 0.2, loop_width = 1, loop_height = 20, orientation = 0, two_way = FALSE, locked = FALSE )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_loops(p, loops_data, zoom_level = 1.2)"},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","title":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","text":"function adds points onto ggplot output (including plots created ggsem shiny app).","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","text":"","code":"draw_points(p, points_data, zoom_level = 1)"},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","text":"p ggplot object points_data object stores CSV file containing information points ggsem shiny app. zoom_level numeric value control zoom level plot. Default 1.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","text":"ggplot object returned function's output.","code":""},{"path":"https://smin95.github.io/ggsem/reference/draw_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw points from a point CSV file (from ggsem Shiny app) on a ggplot object — draw_points","text":"","code":"library(ggplot2)  points_data <- data.frame( x = 20, y = 300, shape = 'square', color = '#D0C5ED', size = 50, border_color = '#9646D4', border_width = 2, alpha = 1, locked = FALSE, lavaan = FALSE )  p <- ggplot(mtcars) + geom_point(aes(mpg, disp))  draw_points(p, points_data, zoom_level = 1.2)"},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get axis range of a ggplot object — get_axis_range","title":"Get axis range of a ggplot object — get_axis_range","text":"function calculate range x- y- axes.","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get axis range of a ggplot object — get_axis_range","text":"","code":"get_axis_range(plot)"},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get axis range of a ggplot object — get_axis_range","text":"plot ggplot output csv_to_ggplot()","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get axis range of a ggplot object — get_axis_range","text":"list object two elements, two vector values. first element stores minimum maximum values plot's x-axis range, second element stores minimum maximum values plot's y-axis range.","code":""},{"path":"https://smin95.github.io/ggsem/reference/get_axis_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get axis range of a ggplot object — get_axis_range","text":"","code":"library(ggplot2) ggplot(mtcars) + geom_point(aes(mpg, disp)) -> p1 get_axis_range(p1) #> $x_range #> [1]  9.225 35.075 #>  #> $y_range #> [1]  51.055 492.045 #>"},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ggsem (shiny app) locally through a browser — launch","title":"Run ggsem (shiny app) locally through a browser — launch","text":"Run ggsem (shiny app) locally browser","code":""},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ggsem (shiny app) locally through a browser — launch","text":"","code":"launch()"},{"path":"https://smin95.github.io/ggsem/reference/launch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ggsem (shiny app) locally through a browser — launch","text":"return value, called side effects","code":""}]
